// Code generated by Prisma (prisma@1.25.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  language: (where?: LanguageWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  language: (where: LanguageWhereUniqueInput) => LanguagePromise;
  languages: (args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Language>;
  languagesConnection: (args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LanguageConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Team>;
  teamsConnection: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoPromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLanguage: (data: LanguageCreateInput) => LanguagePromise;
  updateLanguage: (args: {
    data: LanguageUpdateInput;
    where: LanguageWhereUniqueInput;
  }) => LanguagePromise;
  updateManyLanguages: (args: {
    data: LanguageUpdateManyMutationInput;
    where?: LanguageWhereInput;
  }) => BatchPayloadPromise;
  upsertLanguage: (args: {
    where: LanguageWhereUniqueInput;
    create: LanguageCreateInput;
    update: LanguageUpdateInput;
  }) => LanguagePromise;
  deleteLanguage: (where: LanguageWhereUniqueInput) => LanguagePromise;
  deleteManyLanguages: (where?: LanguageWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (args: {
    data: TeamUpdateInput;
    where: TeamWhereUniqueInput;
  }) => TeamPromise;
  updateManyTeams: (args: {
    data: TeamUpdateManyMutationInput;
    where?: TeamWhereInput;
  }) => BatchPayloadPromise;
  upsertTeam: (args: {
    where: TeamWhereUniqueInput;
    create: TeamCreateInput;
    update: TeamUpdateInput;
  }) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  language: (
    where?: LanguageSubscriptionWhereInput
  ) => LanguageSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "tempToken_ASC"
  | "tempToken_DESC"
  | "tempTokenExpiry_ASC"
  | "tempTokenExpiry_DESC"
  | "jobTitle_ASC"
  | "jobTitle_DESC"
  | "country_ASC"
  | "country_DESC"
  | "city_ASC"
  | "city_DESC"
  | "howHeard_ASC"
  | "howHeard_DESC"
  | "isConfirmed_ASC"
  | "isConfirmed_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission =
  | "SUBSCRIBER"
  | "AUTHOR"
  | "EDITOR"
  | "TEAM_ADMIN"
  | "ADMIN";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContentType =
  | "AUDIO"
  | "VIDEO"
  | "DOCUMENT"
  | "IMAGE"
  | "TEACHING_MATERIAL";

export type LanguageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "language_code_ASC"
  | "language_code_DESC"
  | "locale_ASC"
  | "locale_DESC"
  | "text_direction_ASC"
  | "text_direction_DESC"
  | "display_name_ASC"
  | "display_name_DESC"
  | "native_name_ASC"
  | "native_name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "organization_ASC"
  | "organization_DESC"
  | "isConfirmed_ASC"
  | "isConfirmed_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "author_ASC"
  | "author_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface TeamCreateOneWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput;
  connect?: TeamWhereUniqueInput;
}

export interface UserUpdateWithoutTeamDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions?: UserUpdatepermissionsInput;
  isConfirmed?: Boolean;
}

export interface TeamUpdatecontentTypesInput {
  set?: ContentType[] | ContentType;
}

export type LanguageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VideoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  owner?: String;
  owner_not?: String;
  owner_in?: String[] | String;
  owner_not_in?: String[] | String;
  owner_lt?: String;
  owner_lte?: String;
  owner_gt?: String;
  owner_gte?: String;
  owner_contains?: String;
  owner_not_contains?: String;
  owner_starts_with?: String;
  owner_not_starts_with?: String;
  owner_ends_with?: String;
  owner_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  AND?: VideoWhereInput[] | VideoWhereInput;
  OR?: VideoWhereInput[] | VideoWhereInput;
  NOT?: VideoWhereInput[] | VideoWhereInput;
}

export interface VideoUpdateInput {
  title?: String;
  owner?: String;
  author?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface UserUpdateManyDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions?: UserUpdatepermissionsInput;
  isConfirmed?: Boolean;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  tempToken?: String;
  tempToken_not?: String;
  tempToken_in?: String[] | String;
  tempToken_not_in?: String[] | String;
  tempToken_lt?: String;
  tempToken_lte?: String;
  tempToken_gt?: String;
  tempToken_gte?: String;
  tempToken_contains?: String;
  tempToken_not_contains?: String;
  tempToken_starts_with?: String;
  tempToken_not_starts_with?: String;
  tempToken_ends_with?: String;
  tempToken_not_ends_with?: String;
  tempTokenExpiry?: Float;
  tempTokenExpiry_not?: Float;
  tempTokenExpiry_in?: Float[] | Float;
  tempTokenExpiry_not_in?: Float[] | Float;
  tempTokenExpiry_lt?: Float;
  tempTokenExpiry_lte?: Float;
  tempTokenExpiry_gt?: Float;
  tempTokenExpiry_gte?: Float;
  jobTitle?: String;
  jobTitle_not?: String;
  jobTitle_in?: String[] | String;
  jobTitle_not_in?: String[] | String;
  jobTitle_lt?: String;
  jobTitle_lte?: String;
  jobTitle_gt?: String;
  jobTitle_gte?: String;
  jobTitle_contains?: String;
  jobTitle_not_contains?: String;
  jobTitle_starts_with?: String;
  jobTitle_not_starts_with?: String;
  jobTitle_ends_with?: String;
  jobTitle_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  howHeard?: String;
  howHeard_not?: String;
  howHeard_in?: String[] | String;
  howHeard_not_in?: String[] | String;
  howHeard_lt?: String;
  howHeard_lte?: String;
  howHeard_gt?: String;
  howHeard_gte?: String;
  howHeard_contains?: String;
  howHeard_not_contains?: String;
  howHeard_starts_with?: String;
  howHeard_not_starts_with?: String;
  howHeard_ends_with?: String;
  howHeard_not_ends_with?: String;
  team?: TeamWhereInput;
  isConfirmed?: Boolean;
  isConfirmed_not?: Boolean;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  organization?: String;
  organization_not?: String;
  organization_in?: String[] | String;
  organization_not_in?: String[] | String;
  organization_lt?: String;
  organization_lte?: String;
  organization_gt?: String;
  organization_gte?: String;
  organization_contains?: String;
  organization_not_contains?: String;
  organization_starts_with?: String;
  organization_not_starts_with?: String;
  organization_ends_with?: String;
  organization_not_ends_with?: String;
  members_every?: UserWhereInput;
  members_some?: UserWhereInput;
  members_none?: UserWhereInput;
  isConfirmed?: Boolean;
  isConfirmed_not?: Boolean;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  tempToken?: String;
  tempToken_not?: String;
  tempToken_in?: String[] | String;
  tempToken_not_in?: String[] | String;
  tempToken_lt?: String;
  tempToken_lte?: String;
  tempToken_gt?: String;
  tempToken_gte?: String;
  tempToken_contains?: String;
  tempToken_not_contains?: String;
  tempToken_starts_with?: String;
  tempToken_not_starts_with?: String;
  tempToken_ends_with?: String;
  tempToken_not_ends_with?: String;
  tempTokenExpiry?: Float;
  tempTokenExpiry_not?: Float;
  tempTokenExpiry_in?: Float[] | Float;
  tempTokenExpiry_not_in?: Float[] | Float;
  tempTokenExpiry_lt?: Float;
  tempTokenExpiry_lte?: Float;
  tempTokenExpiry_gt?: Float;
  tempTokenExpiry_gte?: Float;
  jobTitle?: String;
  jobTitle_not?: String;
  jobTitle_in?: String[] | String;
  jobTitle_not_in?: String[] | String;
  jobTitle_lt?: String;
  jobTitle_lte?: String;
  jobTitle_gt?: String;
  jobTitle_gte?: String;
  jobTitle_contains?: String;
  jobTitle_not_contains?: String;
  jobTitle_starts_with?: String;
  jobTitle_not_starts_with?: String;
  jobTitle_ends_with?: String;
  jobTitle_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  howHeard?: String;
  howHeard_not?: String;
  howHeard_in?: String[] | String;
  howHeard_not_in?: String[] | String;
  howHeard_lt?: String;
  howHeard_lte?: String;
  howHeard_gt?: String;
  howHeard_gte?: String;
  howHeard_contains?: String;
  howHeard_not_contains?: String;
  howHeard_starts_with?: String;
  howHeard_not_starts_with?: String;
  howHeard_ends_with?: String;
  howHeard_not_ends_with?: String;
  isConfirmed?: Boolean;
  isConfirmed_not?: Boolean;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface TeamUpdateWithoutMembersDataInput {
  name?: String;
  organization?: String;
  contentTypes?: TeamUpdatecontentTypesInput;
  isConfirmed?: Boolean;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface TeamUpdateOneWithoutMembersInput {
  create?: TeamCreateWithoutMembersInput;
  update?: TeamUpdateWithoutMembersDataInput;
  upsert?: TeamUpsertWithoutMembersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TeamWhereUniqueInput;
}

export interface LanguageCreateInput {
  language_code: String;
  locale: String;
  text_direction?: String;
  display_name: String;
  native_name: String;
}

export interface TeamCreateWithoutMembersInput {
  name: String;
  organization: String;
  contentTypes?: TeamCreatecontentTypesInput;
  isConfirmed?: Boolean;
}

export interface LanguageUpdateInput {
  language_code?: String;
  locale?: String;
  text_direction?: String;
  display_name?: String;
  native_name?: String;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VideoWhereInput;
  AND?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  OR?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  NOT?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
}

export interface LanguageUpdateManyMutationInput {
  language_code?: String;
  locale?: String;
  text_direction?: String;
  display_name?: String;
  native_name?: String;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
  organization?: String;
  contentTypes?: TeamUpdatecontentTypesInput;
  isConfirmed?: Boolean;
}

export interface UserUpsertWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTeamDataInput;
  create: UserCreateWithoutTeamInput;
}

export interface VideoCreateInput {
  title: String;
  owner?: String;
  author?: String;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput;
  create: TeamCreateWithoutMembersInput;
}

export interface TeamCreateInput {
  name: String;
  organization: String;
  members?: UserCreateManyWithoutTeamInput;
  contentTypes?: TeamCreatecontentTypesInput;
  isConfirmed?: Boolean;
}

export interface LanguageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LanguageWhereInput;
  AND?: LanguageSubscriptionWhereInput[] | LanguageSubscriptionWhereInput;
  OR?: LanguageSubscriptionWhereInput[] | LanguageSubscriptionWhereInput;
  NOT?: LanguageSubscriptionWhereInput[] | LanguageSubscriptionWhereInput;
}

export interface UserCreateManyWithoutTeamInput {
  create?: UserCreateWithoutTeamInput[] | UserCreateWithoutTeamInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions?: UserUpdatepermissionsInput;
  team?: TeamUpdateOneWithoutMembersInput;
  isConfirmed?: Boolean;
}

export interface UserCreateWithoutTeamInput {
  firstName: String;
  lastName: String;
  email: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions?: UserCreatepermissionsInput;
  isConfirmed?: Boolean;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  email: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions?: UserCreatepermissionsInput;
  team?: TeamCreateOneWithoutMembersInput;
  isConfirmed?: Boolean;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions?: UserUpdatepermissionsInput;
  isConfirmed?: Boolean;
}

export interface UserUpdateWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTeamDataInput;
}

export interface UserUpdateManyWithoutTeamInput {
  create?: UserCreateWithoutTeamInput[] | UserCreateWithoutTeamInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutTeamInput[]
    | UserUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutTeamInput[]
    | UserUpsertWithWhereUniqueWithoutTeamInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface TeamUpdateInput {
  name?: String;
  organization?: String;
  members?: UserUpdateManyWithoutTeamInput;
  contentTypes?: TeamUpdatecontentTypesInput;
  isConfirmed?: Boolean;
}

export interface TeamCreatecontentTypesInput {
  set?: ContentType[] | ContentType;
}

export interface VideoUpdateManyMutationInput {
  title?: String;
  owner?: String;
  author?: String;
}

export type VideoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface LanguageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  language_code?: String;
  language_code_not?: String;
  language_code_in?: String[] | String;
  language_code_not_in?: String[] | String;
  language_code_lt?: String;
  language_code_lte?: String;
  language_code_gt?: String;
  language_code_gte?: String;
  language_code_contains?: String;
  language_code_not_contains?: String;
  language_code_starts_with?: String;
  language_code_not_starts_with?: String;
  language_code_ends_with?: String;
  language_code_not_ends_with?: String;
  locale?: String;
  locale_not?: String;
  locale_in?: String[] | String;
  locale_not_in?: String[] | String;
  locale_lt?: String;
  locale_lte?: String;
  locale_gt?: String;
  locale_gte?: String;
  locale_contains?: String;
  locale_not_contains?: String;
  locale_starts_with?: String;
  locale_not_starts_with?: String;
  locale_ends_with?: String;
  locale_not_ends_with?: String;
  text_direction?: String;
  text_direction_not?: String;
  text_direction_in?: String[] | String;
  text_direction_not_in?: String[] | String;
  text_direction_lt?: String;
  text_direction_lte?: String;
  text_direction_gt?: String;
  text_direction_gte?: String;
  text_direction_contains?: String;
  text_direction_not_contains?: String;
  text_direction_starts_with?: String;
  text_direction_not_starts_with?: String;
  text_direction_ends_with?: String;
  text_direction_not_ends_with?: String;
  display_name?: String;
  display_name_not?: String;
  display_name_in?: String[] | String;
  display_name_not_in?: String[] | String;
  display_name_lt?: String;
  display_name_lte?: String;
  display_name_gt?: String;
  display_name_gte?: String;
  display_name_contains?: String;
  display_name_not_contains?: String;
  display_name_starts_with?: String;
  display_name_not_starts_with?: String;
  display_name_ends_with?: String;
  display_name_not_ends_with?: String;
  native_name?: String;
  native_name_not?: String;
  native_name_in?: String[] | String;
  native_name_not_in?: String[] | String;
  native_name_lt?: String;
  native_name_lte?: String;
  native_name_gt?: String;
  native_name_gte?: String;
  native_name_contains?: String;
  native_name_not_contains?: String;
  native_name_starts_with?: String;
  native_name_not_starts_with?: String;
  native_name_ends_with?: String;
  native_name_not_ends_with?: String;
  AND?: LanguageWhereInput[] | LanguageWhereInput;
  OR?: LanguageWhereInput[] | LanguageWhereInput;
  NOT?: LanguageWhereInput[] | LanguageWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VideoPreviousValues {
  id: ID_Output;
  title: String;
  owner?: String;
  author?: String;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  owner: () => Promise<String>;
  author: () => Promise<String>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Team {
  id: ID_Output;
  name: String;
  organization: String;
  contentTypes: ContentType[];
  isConfirmed: Boolean;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  organization: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentTypes: () => Promise<ContentType[]>;
  isConfirmed: () => Promise<Boolean>;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  organization: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contentTypes: () => Promise<AsyncIterator<ContentType[]>>;
  isConfirmed: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateLanguage {
  count: Int;
}

export interface AggregateLanguagePromise
  extends Promise<AggregateLanguage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLanguageSubscription
  extends Promise<AsyncIterator<AggregateLanguage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LanguageEdge {
  node: Language;
  cursor: String;
}

export interface LanguageEdgePromise
  extends Promise<LanguageEdge>,
    Fragmentable {
  node: <T = LanguagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LanguageEdgeSubscription
  extends Promise<AsyncIterator<LanguageEdge>>,
    Fragmentable {
  node: <T = LanguageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Video {
  id: ID_Output;
  title: String;
  owner?: String;
  author?: String;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  owner: () => Promise<String>;
  author: () => Promise<String>;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
}

export interface Language {
  id: ID_Output;
  language_code: String;
  locale: String;
  text_direction: String;
  display_name: String;
  native_name: String;
}

export interface LanguagePromise extends Promise<Language>, Fragmentable {
  id: () => Promise<ID_Output>;
  language_code: () => Promise<String>;
  locale: () => Promise<String>;
  text_direction: () => Promise<String>;
  display_name: () => Promise<String>;
  native_name: () => Promise<String>;
}

export interface LanguageSubscription
  extends Promise<AsyncIterator<Language>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  language_code: () => Promise<AsyncIterator<String>>;
  locale: () => Promise<AsyncIterator<String>>;
  text_direction: () => Promise<AsyncIterator<String>>;
  display_name: () => Promise<AsyncIterator<String>>;
  native_name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LanguageConnection {
  pageInfo: PageInfo;
  edges: LanguageEdge[];
}

export interface LanguageConnectionPromise
  extends Promise<LanguageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LanguageEdge>>() => T;
  aggregate: <T = AggregateLanguagePromise>() => T;
}

export interface LanguageConnectionSubscription
  extends Promise<AsyncIterator<LanguageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LanguageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLanguageSubscription>() => T;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface LanguageSubscriptionPayload {
  mutation: MutationType;
  node: Language;
  updatedFields: String[];
  previousValues: LanguagePreviousValues;
}

export interface LanguageSubscriptionPayloadPromise
  extends Promise<LanguageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LanguagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LanguagePreviousValuesPromise>() => T;
}

export interface LanguageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LanguageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LanguageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LanguagePreviousValuesSubscription>() => T;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamPreviousValues {
  id: ID_Output;
  name: String;
  organization: String;
  contentTypes: ContentType[];
  isConfirmed: Boolean;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  organization: () => Promise<String>;
  contentTypes: () => Promise<ContentType[]>;
  isConfirmed: () => Promise<Boolean>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  organization: () => Promise<AsyncIterator<String>>;
  contentTypes: () => Promise<AsyncIterator<ContentType[]>>;
  isConfirmed: () => Promise<AsyncIterator<Boolean>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions: Permission[];
  isConfirmed: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tempToken: () => Promise<String>;
  tempTokenExpiry: () => Promise<Float>;
  jobTitle: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  howHeard: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  isConfirmed: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tempToken: () => Promise<AsyncIterator<String>>;
  tempTokenExpiry: () => Promise<AsyncIterator<Float>>;
  jobTitle: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  howHeard: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  isConfirmed: () => Promise<AsyncIterator<Boolean>>;
}

export interface LanguagePreviousValues {
  id: ID_Output;
  language_code: String;
  locale: String;
  text_direction: String;
  display_name: String;
  native_name: String;
}

export interface LanguagePreviousValuesPromise
  extends Promise<LanguagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  language_code: () => Promise<String>;
  locale: () => Promise<String>;
  text_direction: () => Promise<String>;
  display_name: () => Promise<String>;
  native_name: () => Promise<String>;
}

export interface LanguagePreviousValuesSubscription
  extends Promise<AsyncIterator<LanguagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  language_code: () => Promise<AsyncIterator<String>>;
  locale: () => Promise<AsyncIterator<String>>;
  text_direction: () => Promise<AsyncIterator<String>>;
  display_name: () => Promise<AsyncIterator<String>>;
  native_name: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password?: String;
  tempToken?: String;
  tempTokenExpiry?: Float;
  jobTitle?: String;
  country?: String;
  city?: String;
  howHeard?: String;
  permissions: Permission[];
  isConfirmed: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tempToken: () => Promise<String>;
  tempTokenExpiry: () => Promise<Float>;
  jobTitle: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  howHeard: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  team: <T = TeamPromise>() => T;
  isConfirmed: () => Promise<Boolean>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tempToken: () => Promise<AsyncIterator<String>>;
  tempTokenExpiry: () => Promise<AsyncIterator<Float>>;
  jobTitle: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  howHeard: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  team: <T = TeamSubscription>() => T;
  isConfirmed: () => Promise<AsyncIterator<Boolean>>;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ContentType",
    embedded: false
  },
  {
    name: "Language",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
