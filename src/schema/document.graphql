type Query {
  documentFiles(where: DocumentFileWhereInput, orderBy: DocumentFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentFile]!
  documentFile(id: ID!): DocumentFile

  documentConversionFormats(where: DocumentConversionFormatWhereInput, orderBy: DocumentConversionFormatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentConversionFormat]!
  documentConversionFormat(id: ID!): DocumentConversionFormat

  documentUses(where: DocumentUseWhereInput, orderBy: DocumentUseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentUse]!
  documentUse(id: ID!): DocumentUse
}

type Mutation {
  createDocumentFile(data: DocumentFileCreateInput!): DocumentFile!
  updateDocumentFile(data: DocumentFileUpdateInput!, where: DocumentFileWhereUniqueInput!): DocumentFile
  updateManyDocumentFiles(data: DocumentFileUpdateManyMutationInput!, where: DocumentFileWhereInput): BatchPayload!
  deleteDocumentFile(id: ID!): DocumentFile
  deleteManyDocumentFiles(where: DocumentFileWhereInput): BatchPayload!

  createDocumentConversionFormat(data: DocumentConversionFormatCreateInput!): DocumentConversionFormat!
  updateDocumentConversionFormat(data: DocumentConversionFormatUpdateInput!, where: DocumentConversionFormatWhereUniqueInput!): DocumentConversionFormat
  updateManyDocumentConversionFormats(data: DocumentConversionFormatUpdateManyMutationInput!, where: DocumentConversionFormatWhereInput): BatchPayload!
  deleteDocumentConversionFormat(id: ID!): DocumentConversionFormat
  deleteManyDocumentConversionFormats(where: DocumentConversionFormatWhereInput): BatchPayload!

  createDocumentUse(name: String!): DocumentUse!
  updateDocumentUse(data: DocumentUseUpdateInput!, where: DocumentUseWhereUniqueInput!): DocumentUse
  updateManyDocumentUses(data: DocumentUseUpdateManyMutationInput!, where: DocumentUseWhereInput): BatchPayload!
  deleteDocumentUse(id: ID!): DocumentUse
  deleteManyDocumentUses(where: DocumentUseWhereInput): BatchPayload!
}
