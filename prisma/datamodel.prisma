enum Permission {
  SUBSCRIBER
  AUTHOR
  EDITOR
  TEAM_ADMIN
  ADMIN
}

enum ContentType {
  AUDIO
  VIDEO
  DOCUMENT
  IMAGE
  TEACHING_MATERIAL
}

enum ProjectType {
  LANGUAGE
}

enum VideoBurnedInStatus {
  SUBTITLED
  CAPTIONED
  CLEAN
}

enum VideoQuality {
  WEB
  BROADCAST
}

enum ImageQuality {
  WEB
  PRINT
}

enum ProjectPublishStatus {
  DRAFT
  PUBLISHING
  PUBLISHED
  EMBARGOED
}

enum ProjectVisibility {
  INTERNAL
  PUBLIC
}

enum FileVisibility {
  INTERNAL
  PUBLIC
}

enum TextDirection {
  LTR
  RTL
}

enum ThumbnailSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

type User {
  id: ID! @id
  firstName: String!
  lastName: String!
  email: String! @unique
  password: String
  tempToken: String
  tempTokenExpiry: Float
  jobTitle: String
  country: String
  city: String
  howHeard: String
  permissions: [Permission!]! @scalarList(strategy: RELATION)
  team: Team
  isConfirmed: Boolean! @default(value: false)
}

type Team {
  id: ID! @id
  name: String! @unique
  organization: String!
  members: [User]
  contentTypes: [ContentType] @scalarList(strategy: RELATION)
  isConfirmed: Boolean! @default(value: false)
}

type Language {
  id: ID! @id
  languageCode: String!
  locale: String! @unique
  textDirection: TextDirection! @default(value: LTR)
  displayName: String!
  nativeName: String!
}

# translations prop required as we need at least the English translation to create a category
type Category {
  id: ID! @id
  translations: [LanguageTranslation!]!
}

# translations prop required as we need at least the English translation to create a category
type Tag {
  id: ID! @id
  translations: [LanguageTranslation!]!
}

type LanguageTranslation {
  id: ID! @id
  name: String!
  language: Language!
}

type Thumbnail {
  id: ID! @id
  size: ThumbnailSize @default(value: FULL)
  image: ImageFile
}

type VideoProject {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  publishedAt: DateTime
  projectType: ProjectType! @default(value: LANGUAGE)
  projectTitle: String!
  descPublic: String
  descInternal: String
  author: User #[User|Author] # more than 1 author?
  team: Team
  status: ProjectPublishStatus @default(value: DRAFT)
  visibility: ProjectVisibility @default(value: PUBLIC)
  units: [VideoUnit] @relation(onDelete: CASCADE)
  supportFiles: [SupportFile] @relation(onDelete: CASCADE)
  thumbnails: [ImageFile] @relation(onDelete: CASCADE)
  categories: [Category]
  tags: [Tag]
}

type VideoUnit {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  language: Language
  title: String!
  descPublic: String
  files: [VideoFile] @relation(onDelete: CASCADE)
  tags: [Tag]
  categories: [Category]
  thumbnails: [Thumbnail] @relation(onDelete: CASCADE)
}

type VideoStream {
  id: ID! @id
  site: String # You Tube, Vimeo
  url: String
  embedUrl: String # verify that this is needed
}

type Dimensions {
  id: ID! @id
  width: Int
  height: Int
}

# Full video,promotional teaser, etc
type VideoUse {
  id: ID! @id
  name: String! @unique
}

# thumbnail/cover image, email graphic etc
type ImageUse {
  id: ID! @id
  name: String! @unique
}

type SupportFileUse {
  id: ID! @id
  name: String! @unique
}

type VideoFile {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  language: Language
  filetype: String
  filename: String
  visibility: FileVisibility @default(value: PUBLIC)
  use: VideoUse
  quality: VideoQuality
  videoBurnedInStatus: VideoBurnedInStatus
  url: String
  md5: String # may not need
  duration: Float
  bitrate: Float
  filesize: Float
  dimensions: Dimensions
  stream: [VideoStream] @relation(onDelete: CASCADE)
}

type ImageFile {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  language: Language
  dimensions: Dimensions
  alt: String
  longdesc: String
  caption: String
  filename: String
  filetype: String
  filesize: Float
  visibility: FileVisibility @default(value: PUBLIC)
  use: ImageUse
  md5: String
  url: String
}

type SupportFile {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  language: Language!
  url: String
  md5: String
  filename: String
  filetype: String # srt, pdf
  filesize: Float
  visibility: FileVisibility @default(value: PUBLIC)
  use: SupportFileUse
}
